import React, { useEffect, useRef, useState } from 'react';
import { Box, CircularProgress, Typography, Fade } from '@mui/material';
import { fetchAndDrawThumbnail, drawPlaceholder } from '../utils/utils';

/**
 * A reusable component for displaying thumbnails generated by the WebAssembly module
 */
const ThumbnailCanvas = ({
                             imageName,
                             width = 64,
                             height = 64,
                             showErrorMessages = false,
                             setStatus,
                         }) => {
    const canvasRef = useRef(null);
    const [debugMessage, setDebugMessage] = useState('');
    const [retryCount, setRetryCount] = useState(0);
    const maxRetries = 1;

    useEffect(() => {
        console.log("current image name: " + imageName);
        let isMounted = true;
        let timeoutId;

        const loadThumbnail = async () => {
            if (!canvasRef.current || !imageName) return;

            // Reset state for new image
            if (isMounted) {
                setStatus('loading');
                setDebugMessage('');
            }

            // Draw placeholder while loading
            drawPlaceholder(canvasRef.current, imageName, width);

            // Fetch and draw the actual thumbnail
            const result = await fetchAndDrawThumbnail(
                canvasRef.current,
                imageName,
                width,
                height
            );

            if (!isMounted) return;

            if (result.success) {
                // Ensure status is updated to 'loaded' to hide the loader
                setStatus('loaded');
                console.log(`Thumbnail loaded successfully: ${imageName}`);
            } else {
                setDebugMessage(result.message);
                setStatus(result.status || 'error'); // Ensure status is set to error if not provided

                // Retry logic
                if (result.shouldRetry && retryCount < maxRetries) {
                    setRetryCount(prev => prev + 1);
                    timeoutId = setTimeout(loadThumbnail, 500);
                } else if (!result.success) {
                    // Draw placeholder again for the error state
                    drawPlaceholder(canvasRef.current, imageName, width);
                }
            }
        };

        loadThumbnail();

        return () => {
            isMounted = false;
            if (timeoutId) clearTimeout(timeoutId);
        };
    }, [imageName, width, height, retryCount]);

    return (
        <Box
            sx={{
                width,
                height,
                position: 'relative',
                borderRadius: '4px',
                overflow: 'hidden',
                bgcolor: 'rgba(0,0,0,0.2)'
            }}
        >
            <canvas
                ref={canvasRef}
                width={width}
                height={height}
                style={{ width: '100%', height: '100%' }}
            />

            {/* Use Fade transition to smoothly hide/show the loader */}
            <Fade in={status === 'loading'} timeout={300}>
                <Box
                    sx={{
                        position: 'absolute',
                        top: 0, left: 0, right: 0, bottom: 0,
                        display: status === 'loading' ? 'flex' : 'none', // Explicit display control
                        alignItems: 'center',
                        justifyContent: 'center',
                        backgroundColor: 'rgba(0,0,0,0.4)',
                        pointerEvents: 'none' // Prevent blocking interaction with the canvas
                    }}
                >
                    <CircularProgress size={width * 0.3} />
                </Box>
            </Fade>

            {status === 'error' && showErrorMessages && (
                <Box
                    sx={{
                        position: 'absolute',
                        top: 0, left: 0, right: 0, bottom: 0,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        backgroundColor: 'rgba(0,0,0,0.7)',
                        padding: 1
                    }}
                >
                    <Typography variant="caption" color="error" align="center">
                        {debugMessage}
                    </Typography>
                </Box>
            )}
        </Box>
    );
};

export default ThumbnailCanvas;