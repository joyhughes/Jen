MAKEFLAGS += --no-builtin-rules

# Use wildcard for C++ source files in src/
# Explicitly add emscripten_utils.cpp if it's in src/
# Adjust path if emscripten_utils.cpp is elsewhere
CFILES := $(wildcard src/*.cpp) src/emscripten_utils.cpp

# Generate object file names based on source files
FILES := $(patsubst src/%.cpp,web_build/%.o,$(CFILES))

# Default target
all: lux_react/src/lux.js

# Include dependency files generated by -MMD
# The '-' ignores errors if dependency files don't exist yet
-include $(FILES:.o=.d)

# --- Linking Step ---
# Define object files needed for linking explicitly or use $(FILES)
# Using $(FILES) is generally better if CFILES accurately lists all sources.
OBJECTS := web_build/lux_web.o \
           web_build/life.o \
           web_build/any_effect.o \
           web_build/any_function.o \
           web_build/any_rule.o \
           web_build/buffer_pair.o \
           web_build/effect.o \
           web_build/image.o \
           web_build/uimage.o \
           web_build/ucolor.o \
           web_build/fimage.o \
           web_build/frgb.o \
           web_build/vector_field.o \
           web_build/vect2.o \
           web_build/offset_field.o \
           web_build/gamma_lut.o \
           web_build/image_loader.o \
           web_build/scene.o \
           web_build/scene_io.o \
           web_build/next_element.o \
           web_build/warp_field.o \
           web_build/UI.o \
           web_build/emscripten_utils.o # <<< Added the new object file

# Rule to link the final JS/Wasm output
# Depends on all necessary object files listed in $(OBJECTS)
lux_react/src/lux.js: $(OBJECTS)
	@echo "--- Linking $@ ---" # Add echo for clarity
	# Link all object files together
	em++ $(OBJECTS) \
	-o $@ --embed-file lux_files \
	-s ALLOW_MEMORY_GROWTH=1 -s MODULARIZE -s ENVIRONMENT=web \
	-s NO_DISABLE_EXCEPTION_CATCHING -s EXPORT_ES6=1 -s EXPORTED_RUNTIME_METHODS=['FS'] \
	-sSTACK_SIZE=5MB \
	-g \
	-lembind

# --- Compilation Steps ---
# Use CXXFLAGS for common flags, remove redundancy
CXXFLAGS := -g -MMD -MP -std=c++20

# --- Generic Rule for Compiling .cpp to .o ---
# This rule handles all .cpp files in src/ (including emscripten_utils.cpp)
# It automatically uses CXXFLAGS. $< is the source file, $@ is the target object file.
web_build/%.o: src/%.cpp
	@echo "--- Compiling $< -> $@ ---" # Add echo for clarity
	em++ $(CXXFLAGS) $< -c -o $@


# --- Clean Target ---
# Remove object files, dependency files, and output files
clean:
	@echo "--- Cleaning Build ---" # Add echo for clarity
	rm -f web_build/*.o web_build/*.d lux_react/src/lux.js lux_react/src/lux.wasm

# Declare 'all' and 'clean' as phony targets (they don't represent actual files)
.PHONY: all clean